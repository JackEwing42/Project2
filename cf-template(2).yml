AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Ewing CF Template to create a VPC that will allow SSH access from trusted networks and create a single instance with an Elastic IP address

Parameters:
  KeyName:
    Description: the demo key
    Type: AWS::EC2::KeyPair::KeyName
    Default: demo-KEY
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to access the EC2 instance
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 76.190.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Mappings:
  AWSRegionAMI:
    us-east-1:
      HVM64: ami-0360c520857e3138f

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/23
      Tags:
        - Key: Project
          Value: EWING-CF-VPC
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: Project2 VPC

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 192.168.0.0/24
      Tags:
        - Key: Project
          Value: EWING-CF-Subnet
        - Key: Application
          Value: !Ref AWS::StackId

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Project
          Value: EWING-CF-IG
        - Key: Application
          Value: !Ref AWS::StackId

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: EWING-CF-RT
        - Key: Application
          Value: !Ref AWS::StackId

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable

  UbuntuIPAddress:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      InstanceId: !Ref PublicUbuntuInstance

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 and open all internal ports.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 130.108.0.0/16
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 192.168.0.0/24
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '1'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0

  NetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Project
          Value: EWING-CF-NACL
        - Key: Name
          Value: Project2 NACL
        - Key: Application
          Value: !Ref AWS::StackId

  InboundAllowAllRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: -1
      Egress: false
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1
        To: 65535

  OutboundAllowAllRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  OutboundDenyWttr:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 50
      Protocol: -1
      Egress: true
      RuleAction: deny
      CidrBlock: 5.9.243.187/32

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkACL

  PublicUbuntuInstance:
    Type: AWS::EC2::Instance
    DependsOn: AttachGateway
    Properties:
      ImageId: !FindInMap [AWSRegionAMI, !Ref "AWS::Region", HVM64]
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      SubnetId: !Ref Subnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      Tags:
        - Key: Project
          Value: EWING-CF-PublicUbuntuInstance
        - Key: Application
          Value: !Ref AWS::StackId
        - Key: Name
          Value: Project2 Ubuntu
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          hostnamectl set-hostname EWING-AMI
          apt-get update -y
          apt-get install -y git python3 python3-pip apache2 wamerican docker.io htop sl
          echo "This is from the CF template" > /home/ubuntu/hello.txt
          systemctl enable apache2
          systemctl start apache2

          # Create Wordle script
          cat <<'EOF' > /home/ubuntu/wordle.sh
          #!/bin/bash
          words=($(grep '^\w\w\w\w\w$' /usr/share/dict/words | tr '[a-z]' '[A-Z]'))
          actual=${words[$[$RANDOM % ${#words[@]}]]}
          end=false
          guess_count=0
          max_guess=6
          ...
          EOF
          chmod +x /home/ubuntu/wordle.sh
          chown ubuntu:ubuntu /home/ubuntu/wordle.sh

          # Create index.html
          cat <<'EOF' > /var/www/html/index.html
          <!DOCTYPE html>
          <html lang="en">
          ...
          EOF

          systemctl restart apache2
          systemctl enable docker
          systemctl start docker
          docker pull wsukduncan/cheatsheet
          docker run -d --restart unless-stopped -p 8080:80 wsukduncan/cheatsheet

